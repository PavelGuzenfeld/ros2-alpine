# ROS 2 Jazzy Alpine Linux Build - FINAL FIXED VERSION
FROM alpine:latest AS builder

USER root
RUN apk add --no-cache \
    bash \
    build-base \
    cmake \
    ninja \
    python3-dev \
    py3-pip \
    git \
    curl \
    linux-headers \
    eigen-dev \
    tinyxml2-dev \
    yaml-cpp-dev \
    yaml-dev \
    pkgconfig \
    uncrustify \
    cppcheck \
    py3-flake8 \
    libxml2-utils \
    asio-dev \
    openssl-dev \
    lttng-ust-dev \
    swig \
    cython \
    py3-wheel \
    py3-pybind11-dev \
    libc-dev

ENV PYTHONWARNINGS=ignore::UserWarning:setuptools._distutils.dist
RUN pip3 install --break-system-packages --quiet \
    colcon-common-extensions \
    lark \
    empy \
    pyyaml \
    numpy \
    setuptools \
    wheel \
    pybind11 \
    cython \
    cpplint \
    pycodestyle \
    pydocstyle \
    catkin-pkg \
    distlib

WORKDIR /ros2_ws

# Clone ROS 2 source packages
RUN mkdir -p src && cd src && \
    echo "Cloning ROS 2 Jazzy source packages..." && \
    git clone https://github.com/ament/ament_package.git && \
    git clone https://github.com/ament/ament_cmake.git && \
    git clone https://github.com/ament/ament_index.git && \
    git clone https://github.com/ament/googletest.git && \
    git clone https://github.com/ament/ament_lint.git && \
    git clone https://github.com/ros2/ament_cmake_ros.git && \
    git clone https://github.com/ros2/rcutils.git && \
    git clone https://github.com/ros2/rcpputils.git && \
    git clone https://github.com/ros2/rmw.git && \
    git clone https://github.com/ros2/rosidl.git && \
    git clone https://github.com/ros2/rcl.git && \
    git clone https://github.com/ros2/rclpy.git && \
    git clone https://github.com/ros2/ros2cli.git && \
    git clone https://github.com/ros2/common_interfaces.git && \
    git clone https://github.com/ros2/libyaml_vendor.git && \
    git clone https://github.com/ros2/rosidl_python.git && \
    git clone https://github.com/ros2/rpyutils.git && \
    git clone https://github.com/ros2/rosidl_core.git && \
    git clone https://github.com/ros2/rosidl_defaults.git && \
    git clone https://github.com/ros2/rosidl_dynamic_typesupport.git && \
    git clone https://github.com/ros2/rosidl_dynamic_typesupport_fastrtps.git && \
    git clone https://github.com/ros2/rosidl_typesupport.git && \
    git clone https://github.com/ros2/unique_identifier_msgs.git && \
    git clone https://github.com/ros2/rcl_interfaces.git && \
    git clone https://github.com/ros2/rcl_logging.git && \
    git clone https://github.com/ros2/rmw_implementation.git && \
    git clone https://github.com/ros2/rmw_fastrtps.git && \
    git clone https://github.com/ros2/rmw_dds_common.git && \
    git clone https://github.com/ros2/ros2_tracing.git && \
    git clone https://github.com/eProsima/Fast-DDS.git && \
    git clone https://github.com/eProsima/Fast-CDR.git && \
    git clone https://github.com/eProsima/foonathan_memory_vendor.git && \
    git clone https://github.com/ros2/spdlog_vendor.git && \
    git clone https://github.com/ros2/rosidl_typesupport_fastrtps.git && \
    echo "Source packages cloned successfully"

RUN cd src && \
    find . -name "*_test" -type d ! -path "./ament_cmake/ament_cmake_test*" ! -path "./ament_cmake/ament_cmake_gmock*" ! -path "./ament_cmake_ros/rmw_test_fixture*" -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "*_tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "test_*" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "*example*" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "*demo*" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "*benchmark*" -type d -exec rm -rf {} + 2>/dev/null || true && \
    echo "Test directories cleaned"

ENV MAKEFLAGS="-j2"
ENV CFLAGS="-Wno-int-conversion -Wno-incompatible-pointer-types -Wno-error"
ENV CXXFLAGS="-Wno-error -Wno-deprecated-declarations -Wno-stringop-overread" 

# Build Stage 1: Foundation packages
RUN echo "=== Building Foundation Packages ===" && \
    colcon build \
        --packages-select \
            gtest_vendor \
            gmock_vendor \
            ament_package \
        --cmake-args \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        --event-handlers console_direct+

# Build Stage 2: Ament build system
RUN echo "=== Building Ament Build System ===" && \
    bash -c 'source install/setup.bash && \
    colcon build \
        --packages-up-to \
            ament_cmake \
            ament_lint_common \
            ament_mypy \
            ament_index_python \
        --cmake-args \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF \
            -DPYTHON_EXECUTABLE=/usr/bin/python3 \
            -DPython3_EXECUTABLE=/usr/bin/python3 \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        --event-handlers console_direct+'

# Build Stage 3: External dependencies
RUN echo "=== Building External Dependencies ===" && \
    bash -c 'source install/setup.bash && \
    colcon build \
        --packages-up-to \
            foonathan_memory_vendor \
            fastcdr \
            libyaml_vendor \
        --cmake-args \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        --event-handlers console_direct+'

# Build Stage 4: Build rpyutils (now that ament_mypy is available)
RUN echo "=== Building rpyutils (Python utilities) ===" && \
    bash -c 'source install/setup.bash && \
    colcon build \
        --packages-select \
            rpyutils \
        --cmake-args \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF \
            -DPYTHON_EXECUTABLE=/usr/bin/python3 \
            -DPython3_EXECUTABLE=/usr/bin/python3 \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        --event-handlers console_direct+'

# Build Stage 5: ROSIDL Core (AFTER rpyutils)
RUN echo "=== Building ROSIDL Core ===" && \
    bash -c 'source install/setup.bash && \
    colcon build \
        --packages-up-to \
            rosidl_generator_py \
            rosidl_adapter \
            rosidl_cmake \
            rosidl_parser \
        --cmake-args \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF \
            -DPYTHON_EXECUTABLE=/usr/bin/python3 \
            -DPython3_EXECUTABLE=/usr/bin/python3 \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        --event-handlers console_direct+'

# Build Stage 6: Core ROS packages with Python support
RUN echo "=== Building Core ROS ===" && \
    bash -c 'source install/setup.bash && \
    colcon build \
        --packages-up-to \
            rcutils \
            rmw \
            builtin_interfaces \
            std_msgs \
            rclpy \
        --cmake-args \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=OFF \
            -DPYTHON_EXECUTABLE=/usr/bin/python3 \
            -DPython3_EXECUTABLE=/usr/bin/python3 \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        --event-handlers console_direct+'

ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# ============================================================================
# Runtime Stage - Clean Alpine image with only necessary runtime components
# ============================================================================
FROM alpine:latest AS runtime

LABEL maintainer="ROS 2 Alpine Build"
LABEL description="Minimal ROS 2 Jazzy installation on Alpine Linux"
LABEL ros.distro="jazzy"
LABEL ros.version="2"

# Install runtime dependencies
RUN apk add --no-cache \
    python3 \
    py3-setuptools \
    py3-yaml \
    py3-numpy \
    py3-pip \
    py3-wheel \
    bash \
    libstdc++ \
    libgcc \
    tinyxml2 \
    yaml-cpp \
    yaml \
    openssl \
    lttng-ust

ENV PYTHONWARNINGS=ignore::UserWarning:setuptools._distutils.dist
RUN pip3 install --break-system-packages --quiet lark wheel

RUN mkdir -p /opt/ros/jazzy
COPY --from=builder /ros2_ws/install /opt/ros/jazzy

ENV ROS_VERSION=2 \
    ROS_DISTRO=jazzy \
    ROS_PYTHON_VERSION=3 \
    RMW_IMPLEMENTATION=rmw_fastrtps_cpp

RUN echo '#!/bin/bash' > /opt/ros/jazzy/setup.bash && \
    echo 'export ROS_VERSION=2' >> /opt/ros/jazzy/setup.bash && \
    echo 'export ROS_DISTRO=jazzy' >> /opt/ros/jazzy/setup.bash && \
    echo 'export ROS_PYTHON_VERSION=3' >> /opt/ros/jazzy/setup.bash && \
    echo 'export RMW_IMPLEMENTATION=rmw_fastrtps_cpp' >> /opt/ros/jazzy/setup.bash && \
    echo 'for dir in /opt/ros/jazzy/*/; do' >> /opt/ros/jazzy/setup.bash && \
    echo '  if [ -d "$dir/lib/python3.12/site-packages" ]; then' >> /opt/ros/jazzy/setup.bash && \
    echo '    export PYTHONPATH="$dir/lib/python3.12/site-packages:$PYTHONPATH"' >> /opt/ros/jazzy/setup.bash && \
    echo '  fi' >> /opt/ros/jazzy/setup.bash && \
    echo '  if [ -d "$dir/bin" ]; then' >> /opt/ros/jazzy/setup.bash && \
    echo '    export PATH="$dir/bin:$PATH"' >> /opt/ros/jazzy/setup.bash && \
    echo '  fi' >> /opt/ros/jazzy/setup.bash && \
    echo 'done' >> /opt/ros/jazzy/setup.bash && \
    chmod +x /opt/ros/jazzy/setup.bash

RUN mkdir -p /workspace/src
WORKDIR /workspace

CMD ["/bin/bash", "-c", "source /opt/ros/jazzy/setup.bash && echo 'ROS 2 Jazzy Alpine ready!' && /bin/bash"]